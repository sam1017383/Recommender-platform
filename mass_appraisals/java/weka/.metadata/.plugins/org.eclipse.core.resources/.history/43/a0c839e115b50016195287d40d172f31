
import java.io.BufferedReader;
import java.io.FileReader;

import weka.*;
import weka.filters.supervised.attribute.AttributeSelection;
import weka.attributeSelection.ReliefFAttributeEval;
import weka.attributeSelection.CfsSubsetEval;
import weka.attributeSelection.Ranker;
import weka.attributeSelection.GreedyStepwise;

import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.MultilayerPerceptron;

import weka.classifiers.Evaluation;
import java.util.Random;

import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Remove;
import weka.core.Instances;


import java.util.*;
import java.util.List;


public class go4itEngine {

	public static void main(String[] args) throws Exception{
		System.out.println("hola java-weka");
		
		String File = "/Users/sam/Github/Recommender-platform/mass_appraisals/javaPythonV1/python/cluster_files_inmuebles_casas_nivel_medio_entidad_cdmx.txt";
		
		loadClusters(File); 
	}
	
	
	public static void loadClusters(String namesFile) throws Exception{
		
		List<String> clusterNames = LoadSaveData.loadClusterFileNames(namesFile);
		int i = 0;
		for (String clusterFileName : clusterNames) {
			//if (i<clusterNames.size()){
			if (i<20000){
				i++;
				System.out.println("::::::::::::::::::::: " +Integer.toString(i));
		        Instances dataset = LoadSaveData.loadArff(clusterFileName);
				int numInstances = dataset.numInstances();
				if (numInstances > 5){
					Instances filteredSimple = filterAttributesSimple(dataset);
					Instances filteredAtt = filterAttributes(filteredSimple);
					
					
					//////////////////////// CSV STATS filteredSimple
					String rel_name = filteredSimple.relationName();
					System.out.println("NOMBRE_CLUSTER: " + rel_name);

					int num_instances = filteredSimple.numInstances();
					System.out.println("NUM_AVALUOS: " + Integer.toString(num_instances));
					
					int avgConclu = (int) filteredSimple.meanOrMode(35);
					System.out.println("PROMEDIO_IMP_CONCLUIDO: " + Integer.toString(avgConclu));
					int stdDerConclu = (int) Math.sqrt(filteredSimple.variance(35));
					System.out.println("DSVEST_IMP_CONCLUIDO: " + Integer.toString(stdDerConclu));
					int varIndex = (int) stdDerConclu/avgConclu;
					System.out.println("COEFICIENTE_DESV_PROMEDIO: " + Integer.toString(varIndex));
					
					int stdDerLat = (int) (Math.sqrt(filteredSimple.variance(1))*111320);
					System.out.println("DSVEST_LAT: " + Integer.toString(stdDerLat));
					int stdDerLong = (int) (Math.sqrt(filteredSimple.variance(0))*111320);
					System.out.println("DSVEST_LONG: " + Integer.toString(stdDerLong));
					int varArea = stdDerLat*stdDerLong;
					System.out.println("LAT_LONG_STD_AREA: " + Integer.toString(varArea));
					///////////////////
					
					
					////////////////////////CSV STATS filteredAtt
					String rel_name_filt = filteredAtt.relationName();
					System.out.println("NOMBRE_CLUSTER_FILT: " + rel_name_filt);
	
					int num_instances_filt = filteredAtt.numInstances();
					System.out.println("ATT_FILT: " + Integer.toString(num_instances_filt));
					
					int avgConclu_filt = (int) filteredAtt.meanOrMode(35);
					System.out.println("PROMEDIO_IMP_CONCLUIDO_FILT: " + Integer.toString(avgConclu_filt));
					int stdDerConclu_filt = (int) Math.sqrt(filteredAtt.variance(35));
					System.out.println("DSVEST_IMP_CONCLUIDO_FILT: " + Integer.toString(stdDerConclu_filt));
					
					int stdDerLat_filt = (int) (Math.sqrt(filteredAtt.variance(1))*111320);
					System.out.println("DSVEST_LAT_FILT: " + Integer.toString(stdDerLat_filt));
					int stdDerLong_filt = (int) (Math.sqrt(filteredAtt.variance(0))*111320);
					System.out.println("DSVEST_LONG_FILT: " + Integer.toString(stdDerLong_filt));
					///////////////////
					
					
					
					System.out.println(filteredAtt.toSummaryString());
					
					System.out.println("...");
					System.out.println("Regresion lineal multi-dimensional..");
					LinearRegression lr = buildLinearModel(filteredSimple);
					System.out.println("Filtrando atributos");
					LinearRegression lrAttFiltered = buildLinearModel(filteredAtt);
					//System.out.println(lr);
					
					System.out.println("...");
					System.out.println("Maquina de soporte vectorial..");
					SMOreg smo = buildSMOModel(filteredSimple);
					System.out.println("Filtrando atributos");
					SMOreg smoAttFiltered = buildSMOModel(filteredAtt);
					//System.out.println(smo);
					
					System.out.println("...");
					System.out.println("Perceptron multi-capa..");
					MultilayerPerceptron neuralNet = buildNeuralModel(filteredSimple);
					System.out.println("Filtrando atributos");
					MultilayerPerceptron neuralNetAttFiltered = buildNeuralModel(filteredAtt);
					//System.out.println(neuralNet);
				}else{
					System.out.println("Cluster con muy pocos ejemplos:");
				}
				System.out.println(":::::::::::::::::::::");
			}else{
				break;
			}
		}
	}
	
	public static Instances filterAttributes(Instances dataset) throws Exception{
		AttributeSelection filter = new AttributeSelection();
		CfsSubsetEval eval = new CfsSubsetEval();
		GreedyStepwise search = new GreedyStepwise();
		filter.setEvaluator(eval);
		filter.setSearch(search);
		filter.setInputFormat(dataset);
		Instances filteredDataset = Filter.useFilter(dataset, filter);
		return filteredDataset;
	}
	
	public static Instances filterAttributesSimple(Instances dataset) throws Exception{
		
		// quitar attributo 35: $m2
		String[] opts = new String[]{"-R", "1,2,3,4,5,33,35"};
		Remove remove = new Remove();
		remove.setOptions(opts);
		remove.setInputFormat(dataset);
		Instances filteredData = Filter.useFilter(dataset, remove);
		return filteredData;
	}

	public static LinearRegression buildLinearModel(Instances dataset) throws Exception{
			dataset.setClassIndex(dataset.numAttributes()-1);
			LinearRegression lr = new LinearRegression();
			Evaluation eval = new Evaluation(dataset);
			int folds = 10;
			if (dataset.numInstances()<10){
				folds = dataset.numInstances();
			}
			eval.crossValidateModel(lr, dataset, folds, new Random(1));
			System.out.println("Mean absolute error:     " + eval.meanAbsoluteError());
			System.out.println("Relative absolute error: " + eval.relativeAbsoluteError());
			lr.buildClassifier(dataset);
			return lr;
		}
	
	
	public static SMOreg buildSMOModel(Instances dataset) throws Exception{
		dataset.setClassIndex(dataset.numAttributes()-1);
		SMOreg smo = new SMOreg();
		Evaluation eval = new Evaluation(dataset);
		int folds = 10;
		if (dataset.numInstances()<10){
			folds = dataset.numInstances();
		}
		 
		eval.crossValidateModel(smo, dataset, folds, new Random(1));
		System.out.println("Mean absolute error:     " + eval.meanAbsoluteError());
		System.out.println("Relative absolute error: " + eval.relativeAbsoluteError());
		smo.buildClassifier(dataset);
		return smo;
	}
	
	
	public static MultilayerPerceptron buildNeuralModel(Instances dataset) throws Exception{
		dataset.setClassIndex(dataset.numAttributes()-1);
		MultilayerPerceptron neuralNet = new MultilayerPerceptron();
		Evaluation eval = new Evaluation(dataset);
		int folds = 10;
		if (dataset.numInstances()<10){
			folds = dataset.numInstances();
		}
		eval.crossValidateModel(neuralNet, dataset, folds, new Random(1));
		System.out.println("Mean absolute error:     " + eval.meanAbsoluteError());
		System.out.println("Relative absolute error: " + eval.relativeAbsoluteError());
		neuralNet.buildClassifier(dataset);
		return neuralNet;
	}
		

}
